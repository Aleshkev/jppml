-- File generated by the BNF Converter (bnfc 2.9.4).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Jppml.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Jppml.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Jppml.Abs.Id -> Result
transId x = case x of
  Jppml.Abs.Id string -> failure x

transIdCap :: Jppml.Abs.IdCap -> Result
transIdCap x = case x of
  Jppml.Abs.IdCap string -> failure x

transIdVar :: Jppml.Abs.IdVar -> Result
transIdVar x = case x of
  Jppml.Abs.IdVar string -> failure x

transCon :: Jppml.Abs.Con -> Result
transCon x = case x of
  Jppml.Abs.CInt integer -> failure x
  Jppml.Abs.CString string -> failure x
  Jppml.Abs.CUnit -> failure x

transExp :: Jppml.Abs.Exp -> Result
transExp x = case x of
  Jppml.Abs.ECon con -> failure x
  Jppml.Abs.EObjCon idcap -> failure x
  Jppml.Abs.EId id -> failure x
  Jppml.Abs.ETup exp exps -> failure x
  Jppml.Abs.ELst exps -> failure x
  Jppml.Abs.EApp exp1 exp2 -> failure x
  Jppml.Abs.ENeg exp -> failure x
  Jppml.Abs.EMul exp1 exp2 -> failure x
  Jppml.Abs.EDiv exp1 exp2 -> failure x
  Jppml.Abs.EAdd exp1 exp2 -> failure x
  Jppml.Abs.ESub exp1 exp2 -> failure x
  Jppml.Abs.ECons exp1 exp2 -> failure x
  Jppml.Abs.EAppend exp1 exp2 -> failure x
  Jppml.Abs.ECat exp1 exp2 -> failure x
  Jppml.Abs.ERel exp1 erelop exp2 -> failure x
  Jppml.Abs.EAnd exp1 exp2 -> failure x
  Jppml.Abs.EOr exp1 exp2 -> failure x
  Jppml.Abs.EIf exp1 exp2 exp3 -> failure x
  Jppml.Abs.ELet letbinds exp -> failure x
  Jppml.Abs.ECase exp ecasebinds -> failure x
  Jppml.Abs.EFn ids exp -> failure x

transERelOp :: Jppml.Abs.ERelOp -> Result
transERelOp x = case x of
  Jppml.Abs.EREq -> failure x
  Jppml.Abs.ERNe -> failure x
  Jppml.Abs.ERLt -> failure x
  Jppml.Abs.ERLe -> failure x
  Jppml.Abs.ERGt -> failure x
  Jppml.Abs.ERGe -> failure x

transECaseBind :: Jppml.Abs.ECaseBind -> Result
transECaseBind x = case x of
  Jppml.Abs.ECBJust pat exp -> failure x

transPat :: Jppml.Abs.Pat -> Result
transPat x = case x of
  Jppml.Abs.PCon con -> failure x
  Jppml.Abs.PId id -> failure x
  Jppml.Abs.PWild -> failure x
  Jppml.Abs.PTup pat pats -> failure x
  Jppml.Abs.PLst pats -> failure x
  Jppml.Abs.PObjCon idcap -> failure x
  Jppml.Abs.PObj idcap pat -> failure x
  Jppml.Abs.PCons pat1 pat2 -> failure x

transTyp :: Jppml.Abs.Typ -> Result
transTyp x = case x of
  Jppml.Abs.TIdVar idvar -> failure x
  Jppml.Abs.TId typlst id -> failure x
  Jppml.Abs.TTup typ ttupelems -> failure x
  Jppml.Abs.TFn typ1 typ2 -> failure x

transTypLst :: Jppml.Abs.TypLst -> Result
transTypLst x = case x of
  Jppml.Abs.TLEmpty -> failure x
  Jppml.Abs.TLOne typ -> failure x
  Jppml.Abs.TLMany typ typs -> failure x

transTTupElem :: Jppml.Abs.TTupElem -> Result
transTTupElem x = case x of
  Jppml.Abs.TTupJust typ -> failure x

transDec :: Jppml.Abs.Dec -> Result
transDec x = case x of
  Jppml.Abs.DLet letbinds -> failure x
  Jppml.Abs.DType typbinds -> failure x
  Jppml.Abs.DExn exnbinds -> failure x
  Jppml.Abs.DOpen idcaps -> failure x

transLetBind :: Jppml.Abs.LetBind -> Result
transLetBind x = case x of
  Jppml.Abs.LBJust id exp -> failure x
  Jppml.Abs.LBAnon exp -> failure x

transTypBind :: Jppml.Abs.TypBind -> Result
transTypBind x = case x of
  Jppml.Abs.TBJust typlst id dtags -> failure x

transDTag :: Jppml.Abs.DTag -> Result
transDTag x = case x of
  Jppml.Abs.DTCon idcap -> failure x
  Jppml.Abs.DTArg idcap typ -> failure x

transExnBind :: Jppml.Abs.ExnBind -> Result
transExnBind x = case x of
  Jppml.Abs.EBCon idcap -> failure x
  Jppml.Abs.EBArg idcap typ -> failure x
