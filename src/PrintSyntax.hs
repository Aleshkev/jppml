-- File generated by the BNF Converter (bnfc 2.9.5).

{-# LANGUAGE CPP #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE LambdaCase #-}
#if __GLASGOW_HASKELL__ <= 708
{-# LANGUAGE OverlappingInstances #-}
#endif

-- | Pretty-printer for PrintSyntax.

module PrintSyntax where

import Prelude
  ( ($), (.)
  , Bool(..), (==), (<)
  , Int, Integer, Double, (+), (-), (*)
  , String, (++)
  , ShowS, showChar, showString
  , all, elem, foldr, id, map, null, replicate, shows, span
  )
import Data.Char ( Char, isSpace )
import qualified AbsSyntax

-- | The top-level printing method.

printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 False (map ($ "") $ d []) ""
  where
  rend
    :: Int        -- ^ Indentation level.
    -> Bool       -- ^ Pending indentation to be output before next character?
    -> [String]
    -> ShowS
  rend i p = \case
      "["      :ts -> char '[' . rend i False ts
      "("      :ts -> char '(' . rend i False ts
      "{"      :ts -> onNewLine i     p . showChar   '{'  . new (i+1) ts
      "}" : ";":ts -> onNewLine (i-1) p . showString "};" . new (i-1) ts
      "}"      :ts -> onNewLine (i-1) p . showChar   '}'  . new (i-1) ts
      [";"]        -> char ';'
      ";"      :ts -> char ';' . new i ts
      t  : ts@(s:_) | closingOrPunctuation s
                   -> pending . showString t . rend i False ts
      t        :ts -> pending . space t      . rend i False ts
      []           -> id
    where
    -- Output character after pending indentation.
    char :: Char -> ShowS
    char c = pending . showChar c

    -- Output pending indentation.
    pending :: ShowS
    pending = if p then indent i else id

  -- Indentation (spaces) for given indentation level.
  indent :: Int -> ShowS
  indent i = replicateS (2*i) (showChar ' ')

  -- Continue rendering in new line with new indentation.
  new :: Int -> [String] -> ShowS
  new j ts = showChar '\n' . rend j True ts

  -- Make sure we are on a fresh line.
  onNewLine :: Int -> Bool -> ShowS
  onNewLine i p = (if p then id else showChar '\n') . indent i

  -- Separate given string from following text by a space (if needed).
  space :: String -> ShowS
  space t s =
    case (all isSpace t, null spc, null rest) of
      (True , _   , True ) -> []             -- remove trailing space
      (False, _   , True ) -> t              -- remove trailing space
      (False, True, False) -> t ++ ' ' : s   -- add space if none
      _                    -> t ++ s
    where
      (spc, rest) = span isSpace s

  closingOrPunctuation :: String -> Bool
  closingOrPunctuation [c] = c `elem` closerOrPunct
  closingOrPunctuation _   = False

  closerOrPunct :: String
  closerOrPunct = ")],;"

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- | The printer class does the job.

class Print a where
  prt :: Int -> a -> Doc

instance {-# OVERLAPPABLE #-} Print a => Print [a] where
  prt i = concatD . map (prt i)

instance Print Char where
  prt _ c = doc (showChar '\'' . mkEsc '\'' c . showChar '\'')

instance Print String where
  prt _ = printString

printString :: String -> Doc
printString s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q = \case
  s | s == q -> showChar '\\' . showChar s
  '\\' -> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  s -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j < i then parenth else id

instance Print Integer where
  prt _ x = doc (shows x)

instance Print Double where
  prt _ x = doc (shows x)

instance Print AbsSyntax.Id where
  prt _ (AbsSyntax.Id i) = doc $ showString i
instance Print AbsSyntax.IdCap where
  prt _ (AbsSyntax.IdCap i) = doc $ showString i
instance Print AbsSyntax.IdVar where
  prt _ (AbsSyntax.IdVar i) = doc $ showString i
instance Print (AbsSyntax.Con' a) where
  prt i = \case
    AbsSyntax.CInt _ n -> prPrec i 0 (concatD [prt 0 n])
    AbsSyntax.CString _ str -> prPrec i 0 (concatD [printString str])
    AbsSyntax.CUnit _ -> prPrec i 0 (concatD [doc (showString "("), doc (showString ")")])

instance Print (AbsSyntax.Exp' a) where
  prt i = \case
    AbsSyntax.ECon _ con -> prPrec i 11 (concatD [prt 0 con])
    AbsSyntax.EObjCon _ idcap -> prPrec i 11 (concatD [prt 0 idcap])
    AbsSyntax.EId _ id_ -> prPrec i 11 (concatD [prt 0 id_])
    AbsSyntax.ETup _ exp exps -> prPrec i 11 (concatD [doc (showString "("), prt 0 exp, doc (showString ","), prt 0 exps, doc (showString ")")])
    AbsSyntax.ELst _ exps -> prPrec i 11 (concatD [doc (showString "["), prt 0 exps, doc (showString "]")])
    AbsSyntax.EApp _ exp1 exp2 -> prPrec i 10 (concatD [prt 10 exp1, prt 11 exp2])
    AbsSyntax.ENeg _ exp -> prPrec i 9 (concatD [doc (showString "-"), prt 10 exp])
    AbsSyntax.EMul _ exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "*"), prt 9 exp2])
    AbsSyntax.EDiv _ exp1 exp2 -> prPrec i 8 (concatD [prt 8 exp1, doc (showString "/"), prt 9 exp2])
    AbsSyntax.EAdd _ exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "+"), prt 8 exp2])
    AbsSyntax.ESub _ exp1 exp2 -> prPrec i 7 (concatD [prt 7 exp1, doc (showString "-"), prt 8 exp2])
    AbsSyntax.ECons _ exp1 exp2 -> prPrec i 6 (concatD [prt 7 exp1, doc (showString "::"), prt 6 exp2])
    AbsSyntax.EAppend _ exp1 exp2 -> prPrec i 5 (concatD [prt 6 exp1, doc (showString "@"), prt 5 exp2])
    AbsSyntax.ECat _ exp1 exp2 -> prPrec i 5 (concatD [prt 6 exp1, doc (showString "^"), prt 5 exp2])
    AbsSyntax.ERel _ exp1 erelop exp2 -> prPrec i 4 (concatD [prt 5 exp1, prt 0 erelop, prt 5 exp2])
    AbsSyntax.EAnd _ exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "&&"), prt 4 exp2])
    AbsSyntax.EOr _ exp1 exp2 -> prPrec i 2 (concatD [prt 2 exp1, doc (showString "||"), prt 3 exp2])
    AbsSyntax.EIf _ exp1 exp2 exp3 -> prPrec i 1 (concatD [doc (showString "if"), prt 0 exp1, doc (showString "then"), prt 0 exp2, doc (showString "else"), prt 1 exp3])
    AbsSyntax.ELet _ letbinds exp -> prPrec i 0 (concatD [doc (showString "let"), prt 0 letbinds, doc (showString "in"), prt 0 exp])
    AbsSyntax.ECase _ exp ecasebinds -> prPrec i 0 (concatD [doc (showString "case"), prt 0 exp, doc (showString "of"), prt 0 ecasebinds])
    AbsSyntax.EFn _ ids exp -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 ids, doc (showString "->"), prt 0 exp])

instance Print [AbsSyntax.Exp' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsSyntax.ERelOp' a) where
  prt i = \case
    AbsSyntax.EREq _ -> prPrec i 0 (concatD [doc (showString "==")])
    AbsSyntax.ERNe _ -> prPrec i 0 (concatD [doc (showString "!=")])
    AbsSyntax.ERLt _ -> prPrec i 0 (concatD [doc (showString "<")])
    AbsSyntax.ERLe _ -> prPrec i 0 (concatD [doc (showString "<=")])
    AbsSyntax.ERGt _ -> prPrec i 0 (concatD [doc (showString ">")])
    AbsSyntax.ERGe _ -> prPrec i 0 (concatD [doc (showString ">=")])

instance Print (AbsSyntax.ECaseBind' a) where
  prt i = \case
    AbsSyntax.ECBJust _ pat exp -> prPrec i 0 (concatD [prt 0 pat, doc (showString "->"), prt 0 exp])

instance Print [AbsSyntax.ECaseBind' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print [AbsSyntax.Id] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsSyntax.Pat' a) where
  prt i = \case
    AbsSyntax.PCon _ con -> prPrec i 3 (concatD [prt 0 con])
    AbsSyntax.PId _ id_ -> prPrec i 3 (concatD [prt 0 id_])
    AbsSyntax.PWild _ -> prPrec i 3 (concatD [doc (showString "_")])
    AbsSyntax.PTup _ pat pats -> prPrec i 3 (concatD [doc (showString "("), prt 0 pat, doc (showString ","), prt 0 pats, doc (showString ")")])
    AbsSyntax.PLst _ pats -> prPrec i 3 (concatD [doc (showString "["), prt 0 pats, doc (showString "]")])
    AbsSyntax.PObjCon _ idcap -> prPrec i 3 (concatD [prt 0 idcap])
    AbsSyntax.PObj _ idcap pat -> prPrec i 1 (concatD [prt 0 idcap, prt 2 pat])
    AbsSyntax.PCons _ pat1 pat2 -> prPrec i 0 (concatD [prt 1 pat1, doc (showString "::"), prt 0 pat2])

instance Print [AbsSyntax.Pat' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsSyntax.Typ' a) where
  prt i = \case
    AbsSyntax.TIdVar _ idvar -> prPrec i 3 (concatD [prt 0 idvar])
    AbsSyntax.TId _ typlst id_ -> prPrec i 3 (concatD [prt 0 typlst, prt 0 id_])
    AbsSyntax.TTup _ typ ttupelems -> prPrec i 1 (concatD [prt 2 typ, doc (showString "*"), prt 0 ttupelems])
    AbsSyntax.TFn _ typ1 typ2 -> prPrec i 0 (concatD [prt 1 typ1, doc (showString "->"), prt 0 typ2])

instance Print (AbsSyntax.TypLst' a) where
  prt i = \case
    AbsSyntax.TLEmpty _ -> prPrec i 0 (concatD [])
    AbsSyntax.TLOne _ typ -> prPrec i 0 (concatD [prt 3 typ])
    AbsSyntax.TLMany _ typ typs -> prPrec i 0 (concatD [doc (showString "("), prt 0 typ, doc (showString ","), prt 0 typs, doc (showString ")")])

instance Print [AbsSyntax.Typ' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString ","), prt 0 xs]

instance Print (AbsSyntax.TTupElem' a) where
  prt i = \case
    AbsSyntax.TTupJust _ typ -> prPrec i 0 (concatD [prt 2 typ])

instance Print [AbsSyntax.TTupElem' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "*"), prt 0 xs]

instance Print (AbsSyntax.Dec' a) where
  prt i = \case
    AbsSyntax.DLet _ letbinds -> prPrec i 0 (concatD [doc (showString "let"), prt 0 letbinds])
    AbsSyntax.DType _ typbinds -> prPrec i 0 (concatD [doc (showString "type"), prt 0 typbinds])
    AbsSyntax.DExn _ exnbinds -> prPrec i 0 (concatD [doc (showString "exception"), prt 0 exnbinds])
    AbsSyntax.DOpen _ idcaps -> prPrec i 0 (concatD [doc (showString "open"), prt 0 idcaps])

instance Print [AbsSyntax.IdCap] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print [AbsSyntax.Dec' a] where
  prt _ [] = concatD []
  prt _ (x:xs) = concatD [prt 0 x, prt 0 xs]

instance Print (AbsSyntax.LetBind' a) where
  prt i = \case
    AbsSyntax.LBJust _ id_ exp -> prPrec i 0 (concatD [prt 0 id_, doc (showString "="), prt 0 exp])
    AbsSyntax.LBAnon _ exp -> prPrec i 0 (concatD [doc (showString "_"), doc (showString "="), prt 0 exp])

instance Print [AbsSyntax.LetBind' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print (AbsSyntax.TypBind' a) where
  prt i = \case
    AbsSyntax.TBJust _ typlst id_ dtags -> prPrec i 0 (concatD [prt 0 typlst, prt 0 id_, doc (showString "="), prt 0 dtags])

instance Print [AbsSyntax.TypBind' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]

instance Print (AbsSyntax.DTag' a) where
  prt i = \case
    AbsSyntax.DTCon _ idcap -> prPrec i 0 (concatD [prt 0 idcap])
    AbsSyntax.DTArg _ idcap typ -> prPrec i 0 (concatD [prt 0 idcap, doc (showString "of"), prt 0 typ])

instance Print [AbsSyntax.DTag' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "|"), prt 0 xs]

instance Print (AbsSyntax.ExnBind' a) where
  prt i = \case
    AbsSyntax.EBCon _ idcap -> prPrec i 0 (concatD [prt 0 idcap])
    AbsSyntax.EBArg _ idcap typ -> prPrec i 0 (concatD [prt 0 idcap, doc (showString "of"), prt 0 typ])

instance Print [AbsSyntax.ExnBind' a] where
  prt _ [] = concatD []
  prt _ [x] = concatD [prt 0 x]
  prt _ (x:xs) = concatD [prt 0 x, doc (showString "and"), prt 0 xs]
