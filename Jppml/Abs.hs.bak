-- File generated by the BNF Converter (bnfc 2.9.4).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language jppml.

module Jppml.Abs where

import Prelude (Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Con = CInt Integer | CString String | CUnit
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = ECon Con
    | EObjCon IdCap
    | EId Id
    | ETup Exp [Exp]
    | ELst [Exp]
    | EApp Exp Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | ECons Exp Exp
    | EAppend Exp Exp
    | ECat Exp Exp
    | ERel Exp ERelOp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EIf Exp Exp Exp
    | ELet [LetBind] Exp
    | ECase Exp [ECaseBind]
    | EFn [Id] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ERelOp = EREq | ERNe | ERLt | ERLe | ERGt | ERGe
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ECaseBind = ECBJust Pat Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pat
    = PCon Con
    | PId Id
    | PWild
    | PTup Pat [Pat]
    | PLst [Pat]
    | PObjCon IdCap
    | PObj IdCap Pat
    | PCons Pat Pat
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Typ
    = TIdVar IdVar | TId TypLst Id | TTup Typ [TTupElem] | TFn Typ Typ
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypLst = TLEmpty | TLOne Typ | TLMany Typ [Typ]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TTupElem = TTupJust Typ
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Dec
    = DLet [LetBind] | DType [TypBind] | DExn [ExnBind] | DOpen [IdCap]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LetBind = LBJust Id Exp | LBAnon Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypBind = TBJust TypLst Id [DTag]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DTag = DTCon IdCap | DTArg IdCap Typ
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExnBind = EBCon IdCap | EBArg IdCap Typ
  deriving (C.Eq, C.Ord, C.Show, C.Read)

eCaseAlt :: Exp -> [ECaseBind] -> Exp
eCaseAlt = \ a b -> ECase a b

tBJust :: TypLst -> Id -> [DTag] -> TypBind
tBJust = \ a b c -> TBJust a b c

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype IdCap = IdCap String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype IdVar = IdVar String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

