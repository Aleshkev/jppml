let x = 3
let x = 1 + 2

let x = "hello" ^ " " ^ "world"
let x = "hello world"

let x = x + 1 #

-- TODO: should these two print the same?
let x = 1 :: x

let x = 1 :: 1 :: x

let x = x #

let x = get (Some x) #

let x = failwith "" #
let x = raise Division_by_zero #

let x = True
let x = 2 == 2
let x = 2 + 2 == 4
let x = 2 * 3 + 3 == 9
let x = 3 + 2 * 3 == 9
let x = 3 / 1 == 3
let x = 5 / 2 == 2
let x = 1 / 2 == 0

let x = 1 / 0 #

let x = 15
let x = 3 * (if 2 + 2 == 4 then 5 else 5 + 2)
let x = 3 * (case 2 + 2 == 4 of True -> 5 | False -> 5 + 2)

let x = Some 2
let x = Some x #

let x = None


let x = (3, "K")

let x = 3
let x = fst (3, "g")
let x = snd ("g", 3)

let f = fn x -> case x of (a, b) -> b
let f = snd

let f = fn x -> x * x

let x = 9
let x = (fn x -> x * x) 3

let x = "hi"
let x = (fn x -> x) "hi"

let x = (fn s r -> s ^ " " ^ r) "a" "b"
let x = "a b"

let x = 20
let x = let mean = fn s r -> (s + r) / 2 in mean 10 30

let x = ()
let x = ignore 10
let x = ignore [10, 20, 30]

let x = [(), (), ()]
-- let x = map ignore [1, 2, 3]

type character_class = | Barbarian | Bard | Cleric | Druid | Fighter | Monk | Paladin | Ranger | Rogue | Sorcerer | Wizard

type ('a, 'b) pair = Pair of 'a * 'b   let x = Pair 1 "s"  #
type ('a, 'b) pair = Pair of 'a * 'b   let x = Pair (1, "s")

let x = "ok"
let x = if 2 + 2 == 4 then "ok" else (let _ = assert False in "err")

let x = 9
let x = let square = fn x -> x * x in square 3

let x = 120
let x = let fact = fn x -> if x <= 1 then 1 else x * fact (x - 1) in fact 5

let x = 14
let x = let sigma = fn f x -> case x of [] -> 0 | x :: l -> f x + sigma f l in sigma (fn x -> x * x) [1, 2, 3]

let x = 3
let x = let a = 1 and b = 2 in a + b

let a = 2   let b = 1   let c = 3
let a = 2 and b = 1 and c = 3
let a = 2 and b = 1   let c = a + b
